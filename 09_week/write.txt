1. 블록


auto - 자동변수. 블락 안에 자동으로 메모리를 할당받고 블락을 나가면 해제됨. 가장 기본적인 형태라서 이거는 항상 생략되어 있다보면 된다. 지역변수.
const - 상수. 변경 불가
static - 블락 안에서 전역 변수를 선언하는 방법. 정적 지역 변수라고 부른다. 글로벌과 거의 동일하지만, 링크 개념이 살짝 다르다.
아래와 관련되는데, 이것은 한 파일에서 전역을 선언하는 것이다. 실제 글로벌은 어디에서든 쓸 수 있다. 실질적으로 전역이지만, 진짜 전역은 아닌 꼴.
extern - 외부 변수. 다른 파일에 있는 변수 사용. 전역변수를 사용하는데 다른 파일에도 쓰인다할 때. 다른 파일에 이 변수 있다고 말해주는 것과 같다.
이것은 글로벌과 지역에 같은 이름의 변수가 있을 때, 글로벌 값을 사용할 때 사용하기도 한다.
register - 레지스터. mips에서 배운 그거 말하는 듯. cpu안에 있는 메모리를 잡는다. 그래서 당연히 주소값도 없다.
volatile - 하드웨어가 수시로 변수의 값을 변경하는 경우에 사용하는 지정자. 가령 usb포트에 각종 기기를 넣을 수 있다. 이런 경우에 고정된 장소가 필요할 것이다.
이런 변수가 있다면 cpu는 레지스터로 데이터를 저장하지 않고 매번 메모리에서 참조해서 사용한다. 같은 메모리에 값을 여러번 넣을 경우 보통 컴파일러가 최적화를 진행해준다.
맨 마지막 넣는 코드만 남긴다는 것. 그런데 이걸 사용하면 최적화를 하지 않고 정직하게 해당 변수는 모든 코드를 실행받게 된다.

변수 앞에 쓸 수 있는 것들. 이 뒤에 부호 여부도 나오는 것이 가능하다.

가령 auto signed int 이런식으로 쓸 수 있다는 것.
이때 auto, signed 는 생략이 가능하다. 참고로 short를 쓸 때는 원래 short int인데 int가 생략된 것.
register abc면 int가 또 생략된 것이다.
short abc는 사실 auto signed short int abc이다.

메모리
1. main memory(dram): giga
2. cache memory(sram): mega
3. register : bit

데이터와 정보.
데이터(입력으로 들어감) -- 프로그램을 거치면 -- information(출력으로 나온다)

부팅 시. os가 먼저 메모리에 올라감. 이것이 커널이 된다. 메모리에는 물리적으로 우리가 사용하는 메모리와 분리되어 있지 않지만, 보호된다.
프로그램이 메인 메모리에 올라갈 시에는 프로세스. 스토리지에 저장할 시에 파일이라 부른다.
cpu는 하나이기 때문에 실행되는 프로세스가 관리될 필요가 있다. 이를 스케줄링이라 부른다.

2메가 짜리 실행파일이 있다면, 메인 메모리에 올릴 시에는 2메가보다 크게 공간을 잡아야 한다.
세그먼트(메모리를 필요한 부분만 쪼개서 쓸 때 그 부분을 부르는 말) 메모리는 텍스트, 데이터, 힙스택 공간으로 나뉜다. 이 나누는 것을 세그먼트라 부른다.
실행파일은 이진코드로 써져 있을 것이고 이것은 그대로 메모리의 텍스트 영역에 들어가게 된다.
